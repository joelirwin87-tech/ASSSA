"""Configuration helpers for the Affordable Smart Contract Audits Streamlit app."""
from __future__ import annotations

import os
from dataclasses import dataclass


@dataclass(frozen=True)
class StripeConfig:
    secret_key: str
    price_id: str | None
    success_url: str
    cancel_url: str


@dataclass(frozen=True)
class EmailConfig:
    smtp_host: str
    smtp_port: int
    username: str
    password: str
    sender_email: str
    sender_name: str
    use_tls: bool


@dataclass(frozen=True)
class OpenAIConfig:
    api_key: str
    model: str


@dataclass(frozen=True)
class AppConfig:
    storage_root: str
    stripe: StripeConfig
    email: EmailConfig
    openai: OpenAIConfig
    brand_name: str = "Affordable Smart Contract Audits"
    brand_color: str = "#1F2937"
    report_footer: str = "Confidential â€“ generated by Affordable Smart Contract Audits"


class ConfigError(RuntimeError):
    """Raised when required configuration is missing."""


def _env(key: str, default: str | None = None, required: bool = True) -> str:
    value = os.getenv(key, default)
    if required and (value is None or value.strip() == ""):
        raise ConfigError(f"Missing required environment variable: {key}")
    if value is None:
        return ""
    return value


def load_config() -> AppConfig:
    stripe_config = StripeConfig(
        secret_key=_env("STRIPE_SECRET_KEY"),
        price_id=os.getenv("STRIPE_PRICE_ID"),
        success_url=_env("STRIPE_SUCCESS_URL", required=True),
        cancel_url=_env("STRIPE_CANCEL_URL", required=True),
    )

    email_config = EmailConfig(
        smtp_host=_env("SMTP_HOST"),
        smtp_port=int(_env("SMTP_PORT", required=True)),
        username=_env("SMTP_USERNAME"),
        password=_env("SMTP_PASSWORD"),
        sender_email=_env("SENDER_EMAIL"),
        sender_name=os.getenv("SENDER_NAME", "Affordable Audits"),
        use_tls=os.getenv("SMTP_USE_TLS", "true").lower() in {"1", "true", "yes", "on"},
    )

    openai_config = OpenAIConfig(
        api_key=_env("OPENAI_API_KEY"),
        model=os.getenv("OPENAI_MODEL", "gpt-4o-mini"),
    )

    storage_root = os.getenv("AUDIT_STORAGE_ROOT", "/tmp/audit-workspace")
    os.makedirs(storage_root, exist_ok=True)

    return AppConfig(
        storage_root=storage_root,
        stripe=stripe_config,
        email=email_config,
        openai=openai_config,
    )


__all__ = [
    "AppConfig",
    "StripeConfig",
    "EmailConfig",
    "OpenAIConfig",
    "ConfigError",
    "load_config",
]
